// Code generated by polygen; DO NOT EDIT.
package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"reflect"
)

// _ItemTypeRegistry maps concrete types to their type names
var _ItemTypeRegistry = map[reflect.Type]string{
	reflect.TypeOf((*ImageItem)(nil)).Elem(): "image",
	reflect.TypeOf((*TextItem)(nil)).Elem():  "text",
}

type Item struct {
	IsItem
}

func (v Item) MarshalJSON() ([]byte, error) {
	if v.IsItem == nil {
		return []byte("null"), nil
	}

	// Marshal the implementation first to get its fields
	implData, err := json.Marshal(v.IsItem)
	if err != nil {
		return nil, fmt.Errorf("marshaling IsItem implementation: %v", err)
	}

	// Get type name from registry using the concrete type
	t := reflect.TypeOf(v.IsItem)
	if t.Kind() == reflect.Ptr {
		t = t.Elem()
	}
	typeName, ok := _ItemTypeRegistry[t]
	if !ok {
		return nil, fmt.Errorf("unknown type for Item: %v", t)
	}

	// If it's an empty object, just return descriptor
	if string(implData) == "{}" {
		return []byte(fmt.Sprintf("{\"%s\":\"%s\"}", "kind", typeName)), nil
	}

	// Otherwise, combine descriptor with implementation fields
	var buf bytes.Buffer
	buf.WriteString(fmt.Sprintf("{\"%s\":\"%s\",", "kind", typeName))
	buf.Write(implData[1:])

	return buf.Bytes(), nil
}

func (v *Item) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		*v = Item{}
		return nil
	}

	// First decode just the type field
	typeData := struct {
		Type string `json:"kind"`
	}{}
	if err := json.Unmarshal(data, &typeData); err != nil {
		return fmt.Errorf("unmarshaling Item type field: %v", err)
	}

	if typeData.Type == "" {
		// If no type field and we have an existing value, decode into it
		if v.IsItem != nil {
			decoder := json.NewDecoder(bytes.NewReader(data))
			decoder.DisallowUnknownFields()
			return decoder.Decode(v.IsItem)
		}
		return fmt.Errorf("missing kind field in JSON for Item")
	}

	typeName := typeData.Type

	var value IsItem
	switch typeName {
	case "image":
		v := struct {
			ImageItem
			Type string `json:"kind"`
		}{}
		decoder := json.NewDecoder(bytes.NewReader(data))
		decoder.DisallowUnknownFields()
		if err := decoder.Decode(&v); err != nil {
			return fmt.Errorf("unmarshaling Item as ImageItem: %v", err)
		}
		value = &v.ImageItem
	case "text":
		v := struct {
			TextItem
			Type string `json:"kind"`
		}{}
		decoder := json.NewDecoder(bytes.NewReader(data))
		decoder.DisallowUnknownFields()
		if err := decoder.Decode(&v); err != nil {
			return fmt.Errorf("unmarshaling Item as TextItem: %v", err)
		}
		value = v.TextItem
	default:
		return fmt.Errorf("unknown Item type: %s", typeName)
	}

	*v = Item{
		IsItem: value,
	}
	return nil
}
