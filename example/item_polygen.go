// Code generated by polygen; DO NOT EDIT.
package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"reflect"
)

var (
	_ IsItem = (*ImageItem)(nil)
	_ IsItem = TextItem{}
)

// _ItemTypeRegistry maps concrete types to their type names
var _ItemTypeRegistry = map[reflect.Type]string{
	reflect.TypeOf((*ImageItem)(nil)):       "image",
	reflect.TypeOf((*TextItem)(nil)).Elem(): "text",
}

type Item struct {
	IsItem
}

func (v Item) MarshalJSON() ([]byte, error) {
	if v.IsItem == nil {
		return []byte("null"), nil
	}

	// Marshal the implementation first to get its fields
	implData, err := json.Marshal(v.IsItem)
	if err != nil {
		return nil, fmt.Errorf("polygen: cannot marshal IsItem for Item: %v", err)
	}

	if bytes.Equal(implData, []byte("null")) {
		return implData, nil
	}

	typeName, _, err := _ItemGetType(v.IsItem)
	if err != nil {
		return nil, fmt.Errorf("polygen: cannot get subtype to marshal for Item: %v", err)
	}

	// If it's an empty object, just return descriptor
	if bytes.Equal(implData, []byte("{}")) {
		return []byte(fmt.Sprintf(`{"%s":"%s"}`, "kind", typeName)), nil
	}

	// Otherwise, combine descriptor with implementation fields
	var buf bytes.Buffer

	buf.WriteString(fmt.Sprintf(`{"%s":"%s",`, "kind", typeName))
	buf.Write(implData[1:])

	return buf.Bytes(), nil
}

func (v *Item) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		*v = Item{}
		return nil
	}

	var currTypeName string
	var currTypeAsPointer bool

	if v.IsItem != nil {
		var err error
		currTypeName, currTypeAsPointer, err = _ItemGetType(v.IsItem)
		if err != nil {
			return fmt.Errorf("polygen: cannot get subtype to unmarshal for Item: %v", err)
		}
	}
	_ = currTypeAsPointer // In case of all subtypes being pointers, we must just ignore this

	// First decode just the type field
	typeData := struct {
		Type string `json:"kind"`
	}{
		Type: currTypeName,
	}
	if err := json.Unmarshal(data, &typeData); err != nil {
		return fmt.Errorf("polygen: cannot unmarshal descriptor field kind for Item: %v", err)
	}

	if typeData.Type == "" {
		return fmt.Errorf("polygen: missing descriptor field kind for Item")
	}

	typeName := typeData.Type

	var value IsItem

	switch typeName {
	case "image":
		vv := struct {
			*ImageItem
			Type string `json:"kind"`
		}{}
		if currTypeName == "image" {
			vv.ImageItem = v.IsItem.(*ImageItem)
		} else {
			vv.ImageItem = new(ImageItem)
		}
		decoder := json.NewDecoder(bytes.NewReader(data))
		decoder.DisallowUnknownFields()
		if err := decoder.Decode(&vv); err != nil {
			return fmt.Errorf("polygen: cannot unmarshal ImageItem for Item: %v", err)
		}
		value = vv.ImageItem
	case "text":
		if currTypeName == "text" {
			if currTypeAsPointer {
				vv := struct {
					*TextItem
					Type string `json:"kind"`
				}{}
				vv.TextItem = v.IsItem.(*TextItem)
				decoder := json.NewDecoder(bytes.NewReader(data))
				decoder.DisallowUnknownFields()
				if err := decoder.Decode(&vv); err != nil {
					return fmt.Errorf("polygen: cannot unmarshal TextItem for Item: %v", err)
				}
				value = vv.TextItem
			} else {
				vv := struct {
					TextItem
					Type string `json:"kind"`
				}{}
				vv.TextItem = v.IsItem.(TextItem)
				decoder := json.NewDecoder(bytes.NewReader(data))
				decoder.DisallowUnknownFields()
				if err := decoder.Decode(&vv); err != nil {
					return fmt.Errorf("polygen: cannot unmarshal TextItem for Item: %v", err)
				}
				value = vv.TextItem
			}
		} else {
			vv := struct {
				TextItem
				Type string `json:"kind"`
			}{}
			decoder := json.NewDecoder(bytes.NewReader(data))
			decoder.DisallowUnknownFields()
			if err := decoder.Decode(&vv); err != nil {
				return fmt.Errorf("polygen: cannot unmarshal TextItem for Item: %v", err)
			}
			value = vv.TextItem
		}
	default:
		return fmt.Errorf("polygen: unknown subtype for Item: %s", typeName)
	}

	*v = Item{
		IsItem: value,
	}
	return nil
}

func _ItemGetType(v IsItem) (name string, asPointer bool, _ error) {
	t := reflect.TypeOf(v)
	typeName, ok := _ItemTypeRegistry[t]
	if ok {
		return typeName, false, nil
	}
	// A pointer can be manually used for a value type as it also implements the interface
	if t.Kind() == reflect.Ptr {
		typeName, ok = _ItemTypeRegistry[t.Elem()]
		if ok {
			return typeName, true, nil
		}
	}
	return "", false, fmt.Errorf("unknown subtype: %v", t)
}
